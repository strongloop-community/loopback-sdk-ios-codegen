//
// <%- meta.objcRepoName %>.m
//

#import "<%- meta.objcRepoName %>.h"

<% meta.moreInclude.forEach(function(model) {
-%>
#import "<%- model %>Repository.h"
<%
   });
-%>

@implementation <%- meta.objcRepoName %>

+ (instancetype)repository {
    return [self repositoryWithClassName:@"<%- meta.pluralName %>"];
}

- (<%- meta.objcModelName %> *)modelWithDictionary:(NSDictionary *)dictionary {
    return (<%- meta.objcModelName %> *)[super modelWithDictionary:dictionary];
}

<% meta.moreInclude.forEach(function(model) {
%>
- (<%- model %> *)model<%- model %>WithDictionary:(NSDictionary *)dictionary {
<%- model %>Repository * repo = [<%- model %>Repository repositoryWithClassName:@"<%- model %>"];
    return (<%- model %> *)[repo modelWithDictionary:dictionary];
}
<%
   });
-%>

- (SLRESTContract *)contract {
    SLRESTContract *contract = [super contract];

<% meta.methods.forEach(function (method) {
     if (method.objcGenerated) {
-%>
    [contract addItem:[SLRESTContractItem itemWithPattern:[NSString stringWithFormat:@"/%@<%- method.routes[0].path %>", self.className]
                                                     verb:@"<%- method.routes[0].verb.toUpperCase() %>"]
            forMethod:[NSString stringWithFormat:@"%@.<%- method.name %>", self.className]];
<%   }
   });
-%>

    return contract;
}

<% meta.objcMethods.forEach(function(method) { -%>

- <%- method.prototype %> {
     [self invokeStaticMethod:@"<%- method.rawName %>"
                   parameters:@{ <%- method.paramAssignments %> }
<%   if (method.bodyParamAssignments) { -%>
               bodyParameters:<%- method.bodyParamAssignments %>
<%   } -%>
                      success:^(id value) {
<%   if (method.objcReturnType === meta.objcModelName) { -%>
                        NSAssert([value isKindOfClass:[NSDictionary class]], @"Received non-Dictionary: %@", value);
                        success((<%- meta.objcModelName %>*)[self modelWithDictionary:value]);
<%   } else if (method.objcReturnType === 'NSDictionary') { -%>
                        NSAssert([value isKindOfClass:[NSDictionary class]], @"Received non-Dictionary: %@", value);
                        success((NSDictionary *)value);
<%   } else if (method.objcReturnType === 'NSArray') { -%>
<%
    var moreName = ""
    if (meta.moreInclude.indexOf(method.originObjcReturnType) != -1) {
        moreName = method.originObjcReturnType
    }
-%>
                        NSAssert([value isKindOfClass:[NSArray class]], @"Received non-Array: %@", value);
                        NSMutableArray *models = [NSMutableArray array];
                        [value enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
                            [models addObject:[self model<%- moreName %>WithDictionary:obj]];
                        }];
                        success(models);
<%   } else if (method.objcReturnType === 'BOOL') { -%>
                        success(((NSNumber *)value[@"<%- method.returnArg %>"]).boolValue);
<%   } else if (method.objcReturnType === 'NSNumber') { -%>
                        success(((NSNumber *)value[@"<%- method.returnArg %>"]));
<%   } else if (method.objcReturnType === 'void') { -%>
                        success();
<%   } -%>
                      }
                      failure:failure];
}
<%
   });
-%>

@end
